# Imports
from fractions import Fraction
import math

def getEachOuterRange(x1, x2, currDenominator, newDenominator):
  # Find Scale
  scale = int(newDenominator / currDenominator)
  # Scale Range
  x1 *= scale
  x2 *= scale
  # Compute Ranges
  firstRange = (x1 - 2, x1 - 1, newDenominator)
  secondRange = (x2 + 1, x2 + 2, newDenominator)
  # Return Ranges
  return (firstRange, secondRange)
rangeSets = [
  (1, [(1, 2, 3)]),
  (2, [(1, 2, 3), (1, 2, 9)]),
  (3, [(1, 2, 3), (1, 2, 9), (1, 2, 27), (7, 8, 27)]),
  (4, [(1, 2, 3), (1, 2, 9), (1, 2, 27), (7, 8, 27), (1, 2, 81), (7, 8, 81), (19, 20, 81), (25, 26, 81)]),
  (5, [(1, 2, 3), (1, 2, 9), (1, 2, 27), (7, 8, 27), (1, 2, 81), (7, 8, 81), (19, 20, 81), (25, 26, 81), (1, 2, 243), (7, 8, 243), (19, 20, 243), (25, 26, 243), (55, 56, 243), (61, 62, 243), (73, 74, 243), (79, 80, 243)]),
  (6, [(1, 2, 3), (1, 2, 9), (1, 2, 27), (7, 8, 27), (1, 2, 81), (7, 8, 81), (19, 20, 81), (25, 26, 81), (1, 2, 243), (7, 8, 243), (19, 20, 243), (25, 26, 243), (55, 56, 243), (61, 62, 243), (73, 74, 243), (79, 80, 243), (1, 2, 729), (7, 8, 729), (19, 20, 729), (25, 26, 729), (55, 56, 729), (61, 62, 729), (73, 74, 729), (79, 80, 729), (163, 164, 729), (169, 170, 729), (181, 182, 729), (187, 188, 729), (217, 218, 729), (223, 224, 729), (235, 236, 729), (241, 242, 729)]),
  (7, [(1, 2, 3), (1, 2, 9), (1, 2, 27), (7, 8, 27), (1, 2, 81), (7, 8, 81), (19, 20, 81), (25, 26, 81), (1, 2, 243), (7, 8, 243), (19, 20, 243), (25, 26, 243), (55, 56, 243), (61, 62, 243), (73, 74, 243), (79, 80, 243), (1, 2, 729), (7, 8, 729), (19, 20, 729), (25, 26, 729), (55, 56, 729), (61, 62, 729), (73, 74, 729), (79, 80, 729), (163, 164, 729), (169, 170, 729), (181, 182, 729), (187, 188, 729), (217, 218, 729), (223, 224, 729), (235, 236, 729), (241, 242, 729), (1, 2, 2187), (7, 8, 2187), (19, 20, 2187), (25, 26, 2187), (55, 56, 2187), (61, 62, 2187), (73, 74, 2187), (79, 80, 2187), (163, 164, 2187), (169, 170, 2187), (181, 182, 2187), (187, 188, 2187), (217, 218, 2187), (223, 224, 2187), (235, 236, 2187), (241, 242, 2187), (487, 488, 2187), (493, 494, 2187), (505, 506, 2187), (511, 512, 2187), (541, 542, 2187), (547, 548, 2187), (559, 560, 2187), (565, 566, 2187), (649, 650, 2187), (655, 656, 2187), (667, 668, 2187), (673, 674, 2187), (703, 704, 2187), (709, 710, 2187), (721, 722, 2187), (727, 728, 2187)]),
  (8, [(1, 2, 3), (1, 2, 9), (1, 2, 27), (7, 8, 27), (1, 2, 81), (7, 8, 81), (19, 20, 81), (25, 26, 81), (1, 2, 243), (7, 8, 243), (19, 20, 243), (25, 26, 243), (55, 56, 243), (61, 62, 243), (73, 74, 243), (79, 80, 243), (1, 2, 729), (7, 8, 729), (19, 20, 729), (25, 26, 729), (55, 56, 729), (61, 62, 729), (73, 74, 729), (79, 80, 729), (163, 164, 729), (169, 170, 729), (181, 182, 729), (187, 188, 729), (217, 218, 729), (223, 224, 729), (235, 236, 729), (241, 242, 729), (1, 2, 2187), (7, 8, 2187), (19, 20, 2187), (25, 26, 2187), (55, 56, 2187), (61, 62, 2187), (73, 74, 2187), (79, 80, 2187), (163, 164, 2187), (169, 170, 2187), (181, 182, 2187), (187, 188, 2187), (217, 218, 2187), (223, 224, 2187), (235, 236, 2187), (241, 242, 2187), (487, 488, 2187), (493, 494, 2187), (505, 506, 2187), (511, 512, 2187), (541, 542, 2187), (547, 548, 2187), (559, 560, 2187), (565, 566, 2187), (649, 650, 2187), (655, 656, 2187), (667, 668, 2187), (673, 674, 2187), (703, 704, 2187), (709, 710, 2187), (721, 722, 2187), (727, 728, 2187), (1, 2, 6561), (7, 8, 6561), (19, 20, 6561), (25, 26, 6561), (55, 56, 6561), (61, 62, 6561), (73, 74, 6561), (79, 80, 6561), (163, 164, 6561), (169, 170, 6561), (181, 182, 6561), (187, 188, 6561), (217, 218, 6561), (223, 224, 6561), (235, 236, 6561), (241, 242, 6561), (487, 488, 6561), (493, 494, 6561), (505, 506, 6561), (511, 512, 6561), (541, 542, 6561), (547, 548, 6561), (559, 560, 6561), (565, 566, 6561), (649, 650, 6561), (655, 656, 6561), (667, 668, 6561), (673, 674, 6561), (703, 704, 6561), (709, 710, 6561), (721, 722, 6561), (727, 728, 6561), (1459, 1460, 6561), (1465, 1466, 6561), (1477, 1478, 6561), (1483, 1484, 6561), (1513, 1514, 6561), (1519, 1520, 6561), (1531, 1532, 6561), (1537, 1538, 6561), (1621, 1622, 6561), (1627, 1628, 6561), (1639, 1640, 6561), (1645, 1646, 6561), (1675, 1676, 6561), (1681, 1682, 6561), (1693, 1694, 6561), (1699, 1700, 6561), (1945, 1946, 6561), (1951, 1952, 6561), (1963, 1964, 6561), (1969, 1970, 6561), (1999, 2000, 6561), (2005, 2006, 6561), (2017, 2018, 6561), (2023, 2024, 6561), (2107, 2108, 6561), (2113, 2114, 6561), (2125, 2126, 6561), (2131, 2132, 6561), (2161, 2162, 6561), (2167, 2168, 6561), (2179, 2180, 6561), (2185, 2186, 6561)]),
  (9, [(1, 2, 3), (1, 2, 9), (1, 2, 27), (7, 8, 27), (1, 2, 81), (7, 8, 81), (19, 20, 81), (25, 26, 81), (1, 2, 243), (7, 8, 243), (19, 20, 243), (25, 26, 243), (55, 56, 243), (61, 62, 243), (73, 74, 243), (79, 80, 243), (1, 2, 729), (7, 8, 729), (19, 20, 729), (25, 26, 729), (55, 56, 729), (61, 62, 729), (73, 74, 729), (79, 80, 729), (163, 164, 729), (169, 170, 729), (181, 182, 729), (187, 188, 729), (217, 218, 729), (223, 224, 729), (235, 236, 729), (241, 242, 729), (1, 2, 2187), (7, 8, 2187), (19, 20, 2187), (25, 26, 2187), (55, 56, 2187), (61, 62, 2187), (73, 74, 2187), (79, 80, 2187), (163, 164, 2187), (169, 170, 2187), (181, 182, 2187), (187, 188, 2187), (217, 218, 2187), (223, 224, 2187), (235, 236, 2187), (241, 242, 2187), (487, 488, 2187), (493, 494, 2187), (505, 506, 2187), (511, 512, 2187), (541, 542, 2187), (547, 548, 2187), (559, 560, 2187), (565, 566, 2187), (649, 650, 2187), (655, 656, 2187), (667, 668, 2187), (673, 674, 2187), (703, 704, 2187), (709, 710, 2187), (721, 722, 2187), (727, 728, 2187), (1, 2, 6561), (7, 8, 6561), (19, 20, 6561), (25, 26, 6561), (55, 56, 6561), (61, 62, 6561), (73, 74, 6561), (79, 80, 6561), (163, 164, 6561), (169, 170, 6561), (181, 182, 6561), (187, 188, 6561), (217, 218, 6561), (223, 224, 6561), (235, 236, 6561), (241, 242, 6561), (487, 488, 6561), (493, 494, 6561), (505, 506, 6561), (511, 512, 6561), (541, 542, 6561), (547, 548, 6561), (559, 560, 6561), (565, 566, 6561), (649, 650, 6561), (655, 656, 6561), (667, 668, 6561), (673, 674, 6561), (703, 704, 6561), (709, 710, 6561), (721, 722, 6561), (727, 728, 6561), (1459, 1460, 6561), (1465, 1466, 6561), (1477, 1478, 6561), (1483, 1484, 6561), (1513, 1514, 6561), (1519, 1520, 6561), (1531, 1532, 6561), (1537, 1538, 6561), (1621, 1622, 6561), (1627, 1628, 6561), (1639, 1640, 6561), (1645, 1646, 6561), (1675, 1676, 6561), (1681, 1682, 6561), (1693, 1694, 6561), (1699, 1700, 6561), (1945, 1946, 6561), (1951, 1952, 6561), (1963, 1964, 6561), (1969, 1970, 6561), (1999, 2000, 6561), (2005, 2006, 6561), (2017, 2018, 6561), (2023, 2024, 6561), (2107, 2108, 6561), (2113, 2114, 6561), (2125, 2126, 6561), (2131, 2132, 6561), (2161, 2162, 6561), (2167, 2168, 6561), (2179, 2180, 6561), (2185, 2186, 6561), (1, 2, 19683), (7, 8, 19683), (19, 20, 19683), (25, 26, 19683), (55, 56, 19683), (61, 62, 19683), (73, 74, 19683), (79, 80, 19683), (163, 164, 19683), (169, 170, 19683), (181, 182, 19683), (187, 188, 19683), (217, 218, 19683), (223, 224, 19683), (235, 236, 19683), (241, 242, 19683), (487, 488, 19683), (493, 494, 19683), (505, 506, 19683), (511, 512, 19683), (541, 542, 19683), (547, 548, 19683), (559, 560, 19683), (565, 566, 19683), (649, 650, 19683), (655, 656, 19683), (667, 668, 19683), (673, 674, 19683), (703, 704, 19683), (709, 710, 19683), (721, 722, 19683), (727, 728, 19683), (1459, 1460, 19683), (1465, 1466, 19683), (1477, 1478, 19683), (1483, 1484, 19683), (1513, 1514, 19683), (1519, 1520, 19683), (1531, 1532, 19683), (1537, 1538, 19683), (1621, 1622, 19683), (1627, 1628, 19683), (1639, 1640, 19683), (1645, 1646, 19683), (1675, 1676, 19683), (1681, 1682, 19683), (1693, 1694, 19683), (1699, 1700, 19683), (1945, 1946, 19683), (1951, 1952, 19683), (1963, 1964, 19683), (1969, 1970, 19683), (1999, 2000, 19683), (2005, 2006, 19683), (2017, 2018, 19683), (2023, 2024, 19683), (2107, 2108, 19683), (2113, 2114, 19683), (2125, 2126, 19683), (2131, 2132, 19683), (2161, 2162, 19683), (2167, 2168, 19683), (2179, 2180, 19683), (2185, 2186, 19683), (4375, 4376, 19683), (4381, 4382, 19683), (4393, 4394, 19683), (4399, 4400, 19683), (4429, 4430, 19683), (4435, 4436, 19683), (4447, 4448, 19683), (4453, 4454, 19683), (4537, 4538, 19683), (4543, 4544, 19683), (4555, 4556, 19683), (4561, 4562, 19683), (4591, 4592, 19683), (4597, 4598, 19683), (4609, 4610, 19683), (4615, 4616, 19683), (4861, 4862, 19683), (4867, 4868, 19683), (4879, 4880, 19683), (4885, 4886, 19683), (4915, 4916, 19683), (4921, 4922, 19683), (4933, 4934, 19683), (4939, 4940, 19683), (5023, 5024, 19683), (5029, 5030, 19683), (5041, 5042, 19683), (5047, 5048, 19683), (5077, 5078, 19683), (5083, 5084, 19683), (5095, 5096, 19683), (5101, 5102, 19683), (5833, 5834, 19683), (5839, 5840, 19683), (5851, 5852, 19683), (5857, 5858, 19683), (5887, 5888, 19683), (5893, 5894, 19683), (5905, 5906, 19683), (5911, 5912, 19683), (5995, 5996, 19683), (6001, 6002, 19683), (6013, 6014, 19683), (6019, 6020, 19683), (6049, 6050, 19683), (6055, 6056, 19683), (6067, 6068, 19683), (6073, 6074, 19683), (6319, 6320, 19683), (6325, 6326, 19683), (6337, 6338, 19683), (6343, 6344, 19683), (6373, 6374, 19683), (6379, 6380, 19683), (6391, 6392, 19683), (6397, 6398, 19683), (6481, 6482, 19683), (6487, 6488, 19683), (6499, 6500, 19683), (6505, 6506, 19683), (6535, 6536, 19683), (6541, 6542, 19683), (6553, 6554, 19683), (6559, 6560, 19683)]),
]
def getClosestRangeSet(filterDepth):
  ranges = []
  for idx, (depth, _) in enumerate(rangeSets):
    if (depth <= filterDepth):
      ranges.extend(rangeSets[idx][1])
    else:
      break
  return ranges
def getRanges(filterDepth):
  # Build Filter Ranges
  ranges = getClosestRangeSet(filterDepth)
  lastFilterBase = ranges[-1][2]
  # List All Ranges
  preDepth = round(lastFilterBase**(1/3))
  if (not preDepth == filterDepth):
    for k in range(preDepth+1, filterDepth + 1):
      filterBase = 3**k
      for idx in range(0, len(ranges)):
        currRange = ranges[idx]
        if (currRange[2] != lastFilterBase):
          continue
        (firstRange, secondRange) = getEachOuterRange(*currRange, filterBase)
        ranges.append(firstRange)
        if (not k == 2):
          ranges.append(secondRange)
      lastFilterBase = filterBase
  # # Map Ranges To Fractions - For precomputing ranges
  # filter(lambda x: x[2] == filterDepth, ranges)
  # Map Ranges To Fractions
  for idx in range(0, len(ranges)):
    ranges[idx] = (
      Fraction(ranges[idx][0], ranges[idx][2]),
      Fraction(ranges[idx][1], ranges[idx][2])
    )
  # Sort Ranges
  ranges.sort(key=lambda x: x[0])
  # Return Ranges
  return ranges
# ProblemCode
def problemCode(filterDepth):
  # Get Ranges
  ranges = getRanges(filterDepth)
  # Test Ranges
  output = []
  currRangeIDX = 0
  for k in range(0, math.ceil(filterDepth/2) + 1):
    fraction = Fraction(k, filterDepth)
    for idx in range(currRangeIDX, len(ranges)):
      (start, end) = ranges[idx]
      if (fraction > end):
        currRangeIDX = idx
      if (fraction > start and fraction < end):
        break
    else:
      output.append(k)
  # Add Symmetry
  for k in reversed(output):
    output.append(filterDepth - k)
  # Return
  return output
for test in range(3, 50):
  print(f"{test} -> {problemCode(test)}")
